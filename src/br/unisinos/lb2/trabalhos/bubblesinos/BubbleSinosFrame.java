package br.unisinos.lb2.trabalhos.bubblesinos;

import javax.swing.JOptionPane;

/**
 *
 * @author Cássia Canto Schuch, Gabriel Borges Fernandes
 */
public class BubbleSinosFrame extends javax.swing.JFrame {

	private BubbleMatrix matrix;
	private int elemento;
	private int totalPontos;
	private int turnosParaGerarUmaLinha = 2;
	private int linhaAtual = 1;

	/**
	 * Creates new form BubbleSinosFrame
	 */
	public BubbleSinosFrame() {
		initComponents();
		totalPontos = 0;
		elemento = sorteiaProximoElemento();
		pnCor.setBackground(BubbleSinosPanel.getCorElemento(elemento));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pnCor = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tfCol = new javax.swing.JTextField();
        btPlay = new javax.swing.JButton();
        lbPontos = new javax.swing.JLabel();
        bubbleSinosPanel1 = new br.unisinos.lb2.trabalhos.bubblesinos.BubbleSinosPanel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 660));
        setPreferredSize(new java.awt.Dimension(400, 660));

        pnCor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnCor.setPreferredSize(new java.awt.Dimension(30, 30));
        pnCor.setLayout(null);
        jPanel1.add(pnCor);

        jLabel2.setText("Coluna");
        jPanel1.add(jLabel2);

        tfCol.setColumns(2);
        jPanel1.add(tfCol);

        btPlay.setText("Jogar");
        btPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPlayActionPerformed(evt);
            }
        });
        jPanel1.add(btPlay);

        lbPontos.setText("Pontos: 0");
        jPanel1.add(lbPontos);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        org.jdesktop.layout.GroupLayout bubbleSinosPanel1Layout = new org.jdesktop.layout.GroupLayout(bubbleSinosPanel1);
        bubbleSinosPanel1.setLayout(bubbleSinosPanel1Layout);
        bubbleSinosPanel1Layout.setHorizontalGroup(
            bubbleSinosPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        bubbleSinosPanel1Layout.setVerticalGroup(
            bubbleSinosPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 260, Short.MAX_VALUE)
        );

        getContentPane().add(bubbleSinosPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void btPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPlayActionPerformed
	   play();
   }//GEN-LAST:event_btPlayActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(BubbleSinosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(BubbleSinosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(BubbleSinosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(BubbleSinosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new BubbleSinosFrame().setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btPlay;
    private br.unisinos.lb2.trabalhos.bubblesinos.BubbleSinosPanel bubbleSinosPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbPontos;
    private javax.swing.JPanel pnCor;
    private javax.swing.JTextField tfCol;
    // End of variables declaration//GEN-END:variables

	public void setMatrix(BubbleMatrix matrix) {
		this.matrix = matrix;
		matrix.adicionaLinhaDeElementosAleatorios();
		this.bubbleSinosPanel1.setMatrix(matrix);
	}

	private void play() {
		if (matrix == null) {
			return;
		}

		// TODO: Fazer tratamento de erro, caso não consiga converter para um número
		int col = 0;
		try {
			col = Integer.valueOf(tfCol.getText());
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}

		// TODO: Fazer tratamento de erro, caso coluna seja inválida
		int lin = -1;
		try {
			lin = matrix.adicionaElementoNaColuna(col, elemento);
                        
		} catch (ArrayIndexOutOfBoundsException e) {
		}

		int pontos = matrix.eliminaElementosConectados(col, lin);
		//printLog(matrix);

		totalPontos += pontos;
		lbPontos.setText("Pontos: " + totalPontos);
//      matrix.preencheEspacosDosElementosEliminados(col, lin);
		//printLog(matrix);

		// TODO: detectar fim do jogo e reiniciar o jogo, se for o caso, ou sair.
                    elemento = sorteiaProximoElemento();
                    pnCor.setBackground(BubbleSinosPanel.getCorElemento(elemento));
                    if (deveGerarLinha()) {
                            matrix.adicionaLinhaDeElementosAleatorios();
                    }
                    printLog(matrix);
                    repaint();
//                    int opt = JOptionPane.showConfirmDialog(null, "Fim de jogo! Você perdeu! Deseja jogar novamente?");
//                   
//                        System.exit(0);
//                }
		
	}

	private int sorteiaProximoElemento() {
		// DONE: sortear um número aleartório entre [1..BubbleSinosPanel.NUM_CORES].
		return (int) (Math.random() * BubbleSinosPanel.NUM_CORES) + 1;
	}

	private void printLog(BubbleMatrix matrix) {
		System.out.println("Matriz:");
		System.out.println(matrix);
	}

	private boolean deveGerarLinha() {
		// TODO: verificar se deve ser gerado uma linha de cores ou não.
		//       é possível gerar uma por turno ou uma a cada dois turnos.
		//       Utilizar a variável turnosParaGerarUmaLinha e linhaAtual para 
		//       controlar.
		if (linhaAtual++ >= turnosParaGerarUmaLinha) {
			linhaAtual = 1;
			return true;
		} else {
			return false;
		}
	}
}
